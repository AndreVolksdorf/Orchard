@using Orchard.ContentManagement;
@using Orchard.Search.ViewModels
@using PJS.Bootstrap.Models
@using SmartPage.Maps.MapControl
@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix)
    {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : ""; }).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }

    string CalcuCol(string[] zoneNames, string classNamePrefix)
    {
        var zoneCounter = 0;
        var zoneNumsFilled = zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : ""; }).ToArray().Length;
        return HasText(zoneNumsFilled) ? (classNamePrefix + 12 / zoneNumsFilled) : "";
    }
}
@{
    Display.Insertions();

    var settings = WorkContext.CurrentSite.As<BootstrapThemeSettingsPart>();

    /* Some useful shortcuts or settings
    ***************************************************************/

    Func<dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new[] { "AsideFirst", "AsideSecond" }, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass))
    {
        Model.Classes.Add(asideClass);
    }

    //Add classes to the wrapper div to toggle tripel widget zones on and off
    var tripelClass = CalcuClassify(new[] { "TripelFirst", "TripelSecond", "TripelThird" }, "tripel-"); // for tripel-1, triple-2, etc. if any of the tripel zones are filled
    if (HasText(tripelClass))
    {
        Model.Classes.Add(tripelClass);
    }

    //Add classes to the wrapper div to toggle quad widget zones on and off
    var footerQuadClass = CalcuClassify(new[] { "FooterQuadFirst", "FooterQuadSecond", "FooterQuadThird", "FooterQuadFourth" }, "split-"); // for quad-1, quad-2, etc. if any of the quad zones are filled
    if (HasText(footerQuadClass))
    {
        Model.Classes.Add(footerQuadClass);
    }

    var searchColumnClass = CalcuCol(new[] { "SearchColumn1", "SearchColumn2", "SearchColumn3" }, "col-md-"); // for quad-1, quad-2, etc. if any of the quad zones are filled
                                                                                                              /* Last bit of code to prep the layout wrapper
                                                                                                                                                                                                            ***************************************************************/

    Model.Id = "layout-wrapper";
    var tag = Tag(Model, "div"); // using Tag so the layout div gets the classes, id and other attributes added to the Model
}
@tag.StartElement

@if (Model.Navigation != null)
{
    <div class="header content-top">
        <div class="navbar navbar-default yamm @(settings.UseFixedNav ? "navbar-fixed-top" : string.Empty)">
            <div id="layout-navigation" class="group">
                <div class="navbar-header">
                    @Display.Branding()
                    <button class="navbar-toggle" type="button" data-toggle="collapse" data-target="#main-menu">
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                </div>
                <div class="navbar-collapse collapse" id="main-menu">
                    @Zone(Model.Navigation)

                    @if (settings.UseNavSearch)
                    {
                        var searchText = new SearchViewModel();
                        if (Model.ViewModel != null)
                        {
                            searchText = (SearchViewModel)Model.ViewModel;
                        }
                        Script.Require("jquery").AtFoot();
                        Script.Require("morphsearch").AtFoot();

                        <div id="morphsearch" class="morphsearch">

                            @using (Html.BeginForm("index", "search", new { area = "Orchard.Search" }, FormMethod.Get, new { @class = "morphsearch-form" }))
                            {
                                <div class="form-group">
                                    @Html.TextBox("q", searchText.Query, new { placeholder = "Search", @class = "morphsearch-input" })
                                    <button class="morphsearch-submit" type="submit"><span class="fa-search fa-3x fa"></span></button>
                                </div>
                            }
                            <div class="morphsearch-content">
                                <div class="row">
                                    @if (Model.SearchColumn1 != null)
                                    {
                                        <div class="@searchColumnClass">
                                            @Zone(Model.SearchColumn1)
                                        </div>
                                    }
                                    @if (Model.SearchColumn2 != null)
                                    {
                                        <div class="@searchColumnClass">
                                            @Zone(Model.SearchColumn2)
                                        </div>
                                    }
                                    @if (Model.SearchColumn3 != null)
                                    {
                                        <div class="@searchColumnClass">
                                            @Zone(Model.SearchColumn3)
                                        </div>
                                    }
                                </div>
                            </div><!-- /morphsearch-content -->
                            <span class="morphsearch-close"></span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}
@if (Model.AfterNavigation != null)
{
    <header id="layout-afterNavigation" class="group">
        <div id="afterNavigation">
            @Zone(Model.AfterNavigation)
        </div>
    </header>
}

@if (Model.Header != null)
{
    <header id="layout-header" class="group">
        <div id="header">
            @Zone(Model.Header)
        </div>
    </header>
}
@if (Model.Featured != null)
{
    <div id="layout-featured" class="group section">
        @Zone(Model.Featured)
    </div>
}
else {
    <div id="layout-featured" class="group section">
        <div data-diff="40" data-img-height="1502" data-img-width="1920" style="height: 250px; background-image: url('/Themes/SPT.Zukunftsstadt/Content/Header_Tilt_sm.jpg'); background-attachment: fixed; background-size: 1903px 991.146px; background-position: 50% -111.685px;" class="background parallax">
            <div class="content-a">
                <div class="content-b"></div>
            </div>
        </div>
    </div>
}
@if (Model.BeforeMain != null && Model.BeforeMainSide != null)
{
    <div id="layout-before-main" class="group section section-primary">
        <div id="layout-before-main-wrapper" class="side-active">
            @Zone(Model.BeforeMain)
            @Zone(Model.BeforeMainSide)
        </div>
    </div>
}
else if (Model.BeforeMain != null)
{
    <div id="layout-before-main" class="group section section-primary">
        <div id="layout-before-main-wrapper">
            <div id="before-main-actions">
                @Zone(Model.BeforeMain)
            </div>
        </div>
    </div>
}
else if (Model.BeforeMainSide != null)
{
    <div id="layout-before-main" class="group section section-primary">
        <div id="layout-before-main-wrapper">
            <div id="before-main-actions">
                @Zone(Model.BeforeMainSide)
            </div>
        </div>
    </div>
}


@if (Model.BeforeMainActions != null)
{
    <div id="layout-before-main-actions" class="group">
        <div id="before-main-actions">
            @Zone(Model.BeforeMainActions)
        </div>
    </div>
}

<div id="layout-main-container">
    <div id="layout-main" class="group">
        @if (Model.AsideFirst != null)
        {
            <aside id="aside-first" class="aside-first group">
                @Zone(Model.AsideFirst)
            </aside>
        }
        <div id="layout-content" class="group">
            @if (Model.Messages != null)
            {
                <div id="messages">
                    @Zone(Model.Messages)
                </div>
            }
            @if (Model.BeforeContent != null)
            {
                <div id="before-content">
                    @Zone(Model.BeforeContent)
                </div>
            }
            @* the model content for the page is in the Content zone @ the default position (nothing, zero, zilch) *@
            @if (Model.Content != null)
            {
                <div id="content" class="group">
                    @Zone(Model.Content)
                </div>
            }
            @if (Model.AfterContent != null)
            {
                <div id="after-content">
                    @Zone(Model.AfterContent)
                </div>
            }
        </div>
        @if (Model.AsideSecond != null)
        {
            <aside id="aside-second" class="aside-second">
                @Zone(Model.AsideSecond)
            </aside>
        }
    </div>
</div>
@if (Model.AfterMain != null)
{
    <div id="layout-after-main" class="group">
        @Zone(Model.AfterMain)
    </div>
}
@if (Model.TripelFirst != null || Model.TripelSecond != null || Model.TripelThird != null)
{
    <div class="section section-primary">
        <div id="layout-tripel-container">
            <div id="layout-tripel" class="group">
                @* as in beer *@
                @if (Model.TripelFirst != null)
                {
                    <div id="tripel-first">
                        @Zone(Model.TripelFirst)
                    </div>
                }
                @if (Model.TripelSecond != null)
                {
                    <div id="tripel-second">
                        @Zone(Model.TripelSecond)
                    </div>
                }
                @if (Model.TripelThird != null)
                {
                    <div id="tripel-third">
                        @Zone(Model.TripelThird)
                    </div>
                }
            </div>
        </div>
    </div>
}
@tag.EndElement
@if (Model.Footer != null || Model.FooterQuadFirst != null || Model.FooterQuadSecond != null || Model.FooterQuadThird != null || Model.FooterQuadFourth != null)
{
    <div id="layout-footer" class="group">
        <footer id="footer">
            @if (Model.FooterQuadFirst != null || Model.FooterQuadSecond != null || Model.FooterQuadThird != null || Model.FooterQuadFourth != null)
            {
                <div id="footer-quad" class="group">
                    @if (Model.FooterQuadFirst != null)
                    {
                        <div id="footer-quad-first">
                            @Zone(Model.FooterQuadFirst)
                        </div>
                    }
                    @if (Model.FooterQuadSecond != null)
                    {
                        <div id="footer-quad-second">
                            @Zone(Model.FooterQuadSecond)
                        </div>
                    }
                    @if (Model.FooterQuadThird != null)
                    {
                        <div id="footer-quad-third">
                            @Zone(Model.FooterQuadThird)
                        </div>
                    }
                    @if (Model.FooterQuadFourth != null)
                    {
                        <div id="footer-quad-fourth">
                            @Zone(Model.FooterQuadFourth)
                        </div>
                    }
                </div>
                <hr />
            }
            @if (Model.Footer != null)
            {
                <div id="footer-sig" class="group">
                    @Zone(Model.Footer)
                </div>
            }
        </footer>
    </div>
}
<div id="toTop">
    <h1><i class="fa fa-chevron-up"></i></h1>
</div>
@(Html.GoogleMap().ScriptRegistrar())
